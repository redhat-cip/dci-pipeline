#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2020 Red Hat, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

import json
import os
import time

import requests


DCI_LOGIN = os.environ.get('DCI_LOGIN', 'admin')
DCI_PASSWORD = os.environ.get('DCI_PASSWORD', 'admin')
DCI_CS_URL = os.environ.get('DCI_CS_URL', 'http://127.0.0.1:5000')


def check_return(response):
    print(response)
    if response.status_code // 100 != 2:
        raise Exception(response.text)
    return response


def get_url(endpoint, subresource=None):
    return '%s/api/v1/%s' % (DCI_CS_URL, endpoint)


def get(endpoint, user=(DCI_LOGIN, DCI_PASSWORD,)):
    url = get_url(endpoint)
    print('-------------')
    print('GET %s' % url)
    return check_return(requests.get(url, auth=user))


def post(endpoint, data, user=(DCI_LOGIN, DCI_PASSWORD,)):
    url = get_url(endpoint)
    print('-------------')
    print('POST %s' % url)
    print(json.dumps(data, indent=2))
    return check_return(requests.post(url, json=data, auth=user))


def associate_user_to_team(team_id, user_id, user=(DCI_LOGIN, DCI_PASSWORD,)):
    url = '%s/api/v1/teams/%s/users/%s' % (DCI_CS_URL, team_id, user_id)
    print('-------------')
    print('POST %s' % url)
    return check_return(requests.post(url, json={}, auth=user))


def delete(endpoint, user=(DCI_LOGIN, DCI_PASSWORD,)):
    url = get_url(endpoint)
    print('DELETE %s' % url)
    return check_return(requests.delete(url, auth=user))


def get_teams():
    teams = {}
    for team in get('teams').json()['teams']:
        teams[team['name']] = team
    return teams


def create_team(name):
    r = post('teams', {'name': name})
    return r.json()['team']


def create_product(product):
    r = post('products', {
        'name': product,
        'label': product.upper(),
        'description': 'description for %s' % product
    })
    return r.json()['product']


def create_topic(name, component_types, product, next_topic=None):
    topic = {'name': name, 'component_types': component_types,
             'product_id': product['id']}
    if next_topic:
        topic['next_topic_id'] = next_topic['id']
    r = post('topics', topic)
    return r.json()['topic']


def associate_topic_to_team(topic_id, team_id):
    post('topics/%s/teams' % topic_id, {'team_id': team_id})


def associate_product_to_team(product_id, team_id):
    post('products/%s/teams' % product_id, {'team_id': team_id})


def create_component(name, version, topic_id, tag=None):
    r = post('components', {
        'name': name + '-' + version,
        'type': name,
        'topic_id': topic_id
    })
    print(r.json())
    if tag:
        ret = tag_component(r.json()['component']['id'], tag)
        print(ret.text)


def tag_component(component_id, tag):
    return post('components/%s/tags' % component_id, {'name': tag})


def create_remoteci(name, team_id):
    r = post('remotecis', {'name': name, 'team_id': team_id})
    return r.json()['remoteci']


def wait_db_ready():
    while True:
        try:
            r = get('identity')
            if r.status_code == 200:
                break
        except requests.exceptions.ConnectionError:
            continue
        finally:
            time.sleep(1)


def generate_remoteci_rc_files():
    remotecis = get('remotecis').json()['remotecis']
    for remoteci in remotecis:
        with open('./%s.sh' % remoteci['name'], 'w') as f:
            f.write("""DCI_CLIENT_ID='remoteci/{remoteci_id}'
DCI_API_SECRET='{api_secret}'
DCI_CS_URL='http://127.0.0.1:5000/'
DCI_UI_URL='http://127.0.0.1:8000'
export DCI_CLIENT_ID
export DCI_API_SECRET
export DCI_CS_URL
export DCI_UI_URL
""".format(remoteci_id=remoteci['id'], api_secret=remoteci['api_secret']))


def generate_remoteci_yml_files():
    remotecis = get('remotecis').json()['remotecis']
    for remoteci in remotecis:
        with open('./%s_dci_credentials.yml' % remoteci['name'], 'w') as f:
            f.write("""---
  DCI_CLIENT_ID: remoteci/{remoteci_id}
  DCI_API_SECRET: {api_secret}
  DCI_CS_URL: http://127.0.0.1:5000/
  DCI_UI_URL: http://127.0.0.1:8000
""".format(remoteci_id=remoteci['id'], api_secret=remoteci['api_secret']))


def main():
    wait_db_ready()

    ocp44_components = (
        ('ocp', '4.4.0-0.nightly-20200701', 'ocp-vanilla-4.4-ok'),
        ('ose-tests', '20200628', 'ocp-vanilla-4.4-ok'),
        ('cnf-tests', '20200628', 'ocp-vanilla-4.4-ok'),
        ('partner1-plugin1', '12.03', 'ocp-vanilla-4.4-ok'),
        ('partner1-plugin2', '20200706', 'ocp-vanilla-4.4-ok'),
        ('partner2-plugin1', '20.03', 'ocp-vanilla-4.4-ok'),
    )

    ocp44_components_2 = (
        ('ocp', '4.4.0-0.nightly-20200703'),
        ('ose-tests', '20200703'),
    )

    ocp45_components = (
        ('ocp', '4.5.0-0.nightly-20200701'),
        ('ose-tests', '20200729'),
        ('cnf-tests', '20200728'),
    )

    ocp = create_product('OCP')

    ocp44_topic = create_topic('OCP-4.4', ['ocp', 'ose-tests', 'cnf-tests'], ocp)
    ocp44_topic_id = ocp44_topic['id']
    for name, version, tag in ocp44_components:
        create_component(name, version, ocp44_topic_id, tag)
    for name, version in ocp44_components_2:
        create_component(name, version, ocp44_topic_id)

    ocp45_topic = create_topic('OCP-4.5', ['ocp', 'ose-tests', 'cnf-tests'], ocp)
    ocp45_topic_id = ocp45_topic['id']
    for name, version in ocp45_components:
        create_component(name, version, ocp45_topic_id)

    cnf = create_product('RH-CNF')
    cnf01 = create_topic('RH-CNF-0.1', ['rh-cnf'], cnf)
    create_component('rh-cnf', '0.1.nightly-20200703', cnf01['id'], 'ocp-vanilla-4.4-ok')
    create_component('rh-cnf', '0.1.nightly-20200708', cnf01['id'])

    cnf02 = create_topic('RH-CNF-0.2', ['rh-cnf'], cnf)
    create_component('rh-cnf', '0.2.nightly-20200723', cnf02['id'])

    telco_ci = create_team('telco-ci')
    create_remoteci('telco-pipeline', telco_ci['id'])

    associate_product_to_team(ocp['id'], telco_ci['id'])
    associate_topic_to_team(ocp44_topic_id, telco_ci['id'])
    associate_topic_to_team(ocp45_topic_id, telco_ci['id'])

    telco_ci_partner = create_team('telco-ci-partner')
    create_remoteci('telco-rh-cnf', telco_ci_partner['id'])

    associate_product_to_team(cnf['id'], telco_ci_partner['id'])
    associate_topic_to_team(cnf01['id'], telco_ci_partner['id'])
    associate_topic_to_team(cnf02['id'], telco_ci_partner['id'])

    generate_remoteci_rc_files()
    generate_remoteci_yml_files()


if __name__ == '__main__':
    main()
