#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2020-2025 Red Hat, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

import json
import os
import time

import requests

DCI_LOGIN = os.environ.get("DCI_LOGIN", "admin")
DCI_PASSWORD = os.environ.get("DCI_PASSWORD", "admin")
DCI_CS_URL = os.environ.get("DCI_CS_URL", "http://127.0.0.1:5000")


def check_return(response):
    print(response)
    if response.status_code // 100 != 2:
        raise Exception(response.text)
    return response


def get_url(endpoint, subresource=None):
    return "%s/api/v1/%s" % (DCI_CS_URL, endpoint)


def get(
    endpoint,
    user=(
        DCI_LOGIN,
        DCI_PASSWORD,
    ),
):
    url = get_url(endpoint)
    print("-------------")
    print("GET %s" % url)
    return check_return(requests.get(url, auth=user))


def post(
    endpoint,
    data,
    user=(
        DCI_LOGIN,
        DCI_PASSWORD,
    ),
):
    url = get_url(endpoint)
    print("-------------")
    print("POST %s" % url)
    print(json.dumps(data, indent=2))
    return check_return(requests.post(url, json=data, auth=user))


def put(
    endpoint,
    data,
    etag,
    user=(
        DCI_LOGIN,
        DCI_PASSWORD,
    ),
):
    url = get_url(endpoint)
    print("-------------")
    print("PUT %s" % url)
    print(json.dumps(data, indent=2))
    return check_return(
        requests.put(url, json=data, auth=user, headers={"If-match": etag})
    )


def associate_user_to_team(
    team_id,
    user_id,
    user=(
        DCI_LOGIN,
        DCI_PASSWORD,
    ),
):
    url = "%s/api/v1/teams/%s/users/%s" % (DCI_CS_URL, team_id, user_id)
    print("-------------")
    print("POST %s" % url)
    return check_return(requests.post(url, json={}, auth=user))


def delete(
    endpoint,
    user=(
        DCI_LOGIN,
        DCI_PASSWORD,
    ),
):
    url = get_url(endpoint)
    print("DELETE %s" % url)
    return check_return(requests.delete(url, auth=user))


def get_teams():
    teams = {}
    for team in get("teams").json()["teams"]:
        teams[team["name"]] = team
    return teams


def create_team(name):
    r = post("teams", {"name": name, "has_pre_release_access": True})
    return r.json()["team"]


def create_product(product):
    r = post(
        "products",
        {
            "name": product,
            "label": product.upper(),
            "description": "description for %s" % product,
        },
    )
    return r.json()["product"]


def create_topic(name, component_types, product, next_topic=None):
    topic = {
        "name": name,
        "component_types": component_types,
        "product_id": product["id"],
    }
    if next_topic:
        topic["next_topic_id"] = next_topic["id"]
    r = post("topics", topic)
    return r.json()["topic"]


def associate_product_to_team(product_id, team_id):
    post("products/%s/teams" % product_id, {"team_id": team_id})


def authorize_components_access_teams(team_id, components_team_id):
    post(
        "teams/%s/permissions/components" % team_id, {"teams_ids": [components_team_id]}
    )


def create_component(
    name, version, topic_id, tag=None, team_id=None, dev=True, active=True
):
    data = {
        "display_name": f"{name.upper()} {version}",
        "version": version,
        "type": name,
        "state": "active" if active else "inactive",
        "topic_id": topic_id,
        "data": {
            "version": version,
            "display_name": name,
            "url": "http://url.com/",
            "pull_url": "http://pullurl.com/",
        },
    }
    if team_id:
        data["team_id"] = team_id
    r = post("components", data)
    print(r.json())
    if tag:
        ret = tag_component(
            r.json()["component"], [tag, "build:dev" if dev else "build:ga"]
        )
    else:
        ret = tag_component(r.json()["component"], ["build:dev" if dev else "build:ga"])
    print(ret.text)


def tag_component(component, tags):
    return put("components/%s" % component["id"], {"tags": tags}, component["etag"])


def create_remoteci(name, team_id):
    r = post("remotecis", {"name": name, "team_id": team_id})
    return r.json()["remoteci"]


def create_user(name):
    u = post(
        "users",
        {
            "name": name,
            "fullname": name,
            "email": "%s@email.com" % name,
            "password": name,
        },
    )
    return u.json()["user"]


def wait_db_ready():
    retry = 60
    while True:
        try:
            r = get("identity")
            if r.status_code == 200:
                break
        except requests.exceptions.ConnectionError:
            continue
        except Exception as e:
            print("Error connecting to DCI CS API: %s" % e)
            retry -= 1
            if retry <= 0:
                print("Failed to connect to DCI CS API after multiple attempts.")
                raise e
        finally:
            print("Retrying in 1 second...")
            time.sleep(1)


def generate_remoteci_rc_files():
    remotecis = get("remotecis").json()["remotecis"]
    for remoteci in remotecis:
        with open("./%s.sh" % remoteci["name"], "w") as f:
            f.write(
                """DCI_CLIENT_ID='remoteci/{remoteci_id}'
DCI_API_SECRET='{api_secret}'
DCI_CS_URL='{dci_cs_url}'
DCI_UI_URL='http://127.0.0.1:8000'
export DCI_CLIENT_ID
export DCI_API_SECRET
export DCI_CS_URL
export DCI_UI_URL
""".format(
                    remoteci_id=remoteci["id"],
                    api_secret=remoteci["api_secret"],
                    dci_cs_url=DCI_CS_URL,
                )
            )


def generate_remoteci_yml_files():
    remotecis = get("remotecis").json()["remotecis"]
    for remoteci in remotecis:
        with open("./%s_dci_credentials.yml" % remoteci["name"], "w") as f:
            f.write(
                """---
DCI_CLIENT_ID: remoteci/{remoteci_id}
DCI_API_SECRET: {api_secret}
DCI_CS_URL: {dci_cs_url}
DCI_UI_URL: http://127.0.0.1:8000
""".format(
                    remoteci_id=remoteci["id"],
                    api_secret=remoteci["api_secret"],
                    dci_cs_url=DCI_CS_URL,
                )
            )


def generate_pipeline_user_files():
    with open("./pipeline_user_dci_credentials.yml", "w") as f:
        f.write(
            """---
DCI_PIPELINE_USERNAME: pipeline-user
DCI_PIPELINE_PASSWORD: pipeline-user
DCI_CS_URL: {dci_cs_url}
DCI_UI_URL: http://127.0.0.1:8000""".format(
                dci_cs_url=DCI_CS_URL
            )
        )

    with open("./pipeline_user_dci_credentials.sh", "w") as f:
        f.write(
            """
DCI_PIPELINE_USERNAME='pipeline-user'
DCI_PIPELINE_PASSWORD='pipeline-user'
DCI_CS_URL='{dci_cs_url}'
DCI_UI_URL='http://127.0.0.1:8000'
export DCI_PIPELINE_USERNAME
export DCI_PIPELINE_PASSWORD
export DCI_CS_URL
export DCI_UI_URL""".format(
                dci_cs_url=DCI_CS_URL
            )
        )


def main():
    wait_db_ready()

    # Create the OpenShift product
    ocp = create_product("OpenShift")
    ocp_id = ocp["id"]

    # Create the OpenShift topics: OCP-4.5 to OCP-4.13
    topic = {}
    for minor in range(5, 14):
        topic[f"OCP-4.{minor}"] = create_topic(
            f"OCP-4.{minor}", ["ocp", "ose-tests", "cnf-tests"], ocp
        )

    # Create the teams
    rh_telco_ci = create_team("rh-telco-ci")
    rh_telco_ci_id = rh_telco_ci["id"]

    cnf_telco_ci = create_team("cnf-telco-ci")
    cnf_telco_ci_id = cnf_telco_ci["id"]

    storage_plugin_telco_ci = create_team("storage-plugin-telco-ci")
    storage_plugin_telco_ci_id = storage_plugin_telco_ci["id"]

    network_plugin_telco_ci = create_team("network-plugin-telco-ci")
    network_plugin_telco_ci_id = network_plugin_telco_ci["id"]

    # Create the pipeline user and remotecis
    pipeline_user = create_user("pipeline-user")
    pipeline_user_id = pipeline_user["id"]
    create_remoteci("rh-telco-pipeline", rh_telco_ci_id)
    create_remoteci("cnf-telco-ci", cnf_telco_ci_id)
    create_remoteci("storage-plugin-telco-ci", storage_plugin_telco_ci_id)
    create_remoteci("network-plugin-telco-ci", network_plugin_telco_ci_id)

    # Adds the permissions
    teams = (
        rh_telco_ci_id,
        cnf_telco_ci_id,
        storage_plugin_telco_ci_id,
        network_plugin_telco_ci_id,
    )
    for team_id in teams:
        # the pipeline user must belongs to every teams
        associate_user_to_team(team_id, pipeline_user_id)
        associate_product_to_team(ocp_id, team_id)

    for team_id in teams[1:]:
        authorize_components_access_teams(rh_telco_ci_id, team_id)

    # Create OCP components
    ocp48_components = (
        ("ocp", "4.8.0-0.ga-20200601", "ocp-vanilla-4.8-ok", False, True),
        ("ocp", "4.8.0-0.ga-20200630", "ocp-vanilla-4.8-ok", False, False),
        ("ose-tests", "20200628", "ocp-vanilla-4.8-ok", False, True),
        ("cnf-tests", "20200628", "ocp-vanilla-4.8-ok", False, True),
    )
    for name, version, tag, dev, active in ocp48_components:
        create_component(
            name, version, topic["OCP-4.8"]["id"], tag=tag, dev=dev, active=active
        )

    ocp48_components_2 = (
        ("ocp", "4.8.0-0.nightly-20200703", True),
        ("ose-tests", "20200703", False),
        ("cnf-tests", "20200728", False),
    )
    for name, version, dev in ocp48_components_2:
        create_component(name, version, topic["OCP-4.8"]["id"], dev=dev)

    ocp49_components = (
        ("ocp", "4.9.0-0.nightly-20200701"),
        ("ose-tests", "20200729"),
        ("cnf-tests", "20200728"),
    )
    for name, version in ocp49_components:
        create_component(name, version, topic["OCP-4.9"]["id"])

    # Create plugins components
    create_component(
        "storage-plugin",
        "0.1.nightly-20200622",
        topic["OCP-4.8"]["id"],
        team_id=storage_plugin_telco_ci_id,
    )
    create_component(
        "storage-plugin",
        "0.1.nightly-20200521",
        topic["OCP-4.8"]["id"],
        team_id=storage_plugin_telco_ci_id,
    )
    create_component(
        "network-plugin",
        "0.1.nightly-20200420",
        topic["OCP-4.8"]["id"],
        team_id=network_plugin_telco_ci_id,
    )
    create_component(
        "network-plugin",
        "0.1.nightly-20200319",
        topic["OCP-4.8"]["id"],
        team_id=network_plugin_telco_ci_id,
    )

    # Create CNF components

    create_component(
        "rh-cnf",
        "0.1.nightly-20200703",
        topic["OCP-4.8"]["id"],
        tag="ocp-vanilla-4.8-ok",
        team_id=cnf_telco_ci_id,
    )
    create_component(
        "rh-cnf",
        "0.1.nightly-20200708",
        topic["OCP-4.8"]["id"],
        team_id=cnf_telco_ci_id,
    )
    create_component(
        "rh-cnf",
        "0.2.nightly-20200723",
        topic["OCP-4.9"]["id"],
        team_id=cnf_telco_ci_id,
    )

    generate_remoteci_rc_files()
    generate_remoteci_yml_files()
    generate_pipeline_user_files()


if __name__ == "__main__":
    main()
