#!/bin/bash
#
# Copyright (C) 2020-2022 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

set -x

DIR="$1"
BODY="$2"
STARTING="$3"

TOPDIR=$(cd $(dirname $0); pwd)

if [[ $0 =~ .*-podman$ ]]; then
    SUFFIX=-podman
else
    SUFFIX=
fi

if [ -r "$TOPDIR/common$SUFFIX" ]; then
    BASEDIR="$TOPDIR"
else
    BASEDIR=/usr/share/dci-pipeline
fi

. "$BASEDIR/common$SUFFIX"

for json in $(ls $DIR/*.json); do
    # gerrit
    if [ $(jq -r .url $json) = null ]; then
        if [ -n "$STARTING" ] || [ -z "$GERRIT_SSH_ID" ] || [ -z "$GERRIT_SSH_LOGIN" ]; then
            continue
        fi
        CHANGEID=$(jq -r ._number $json)
        CURREV=$(jq -r .current_revision $json)
        PATCHSET=$(jq -r ".revisions[\"$CURREV\"]._number" $json)
        # Use json to allow message to be formatted
        echo '{"message": "'${BODY}'"}' |
          ssh \
          -i ~/.ssh/"$GERRIT_SSH_ID" \
          -p 29418 \
          "${GERRIT_SSH_LOGIN}@softwarefactory-project.io" \
            gerrit review -j "$CHANGEID,$PATCHSET"
    # github
    else
        if [ -z "$GITHUB_TOKEN" ]; then
            continue
        fi
        REPO_NAME=$(jq -r .head.repo.name $json)
        # voting on some GH projects
        if [[ -n "$GITHUB_VOTING_REPOS" && "$REPO_NAME" =~ $GITHUB_VOTING_REPOS ]]; then
            # doc in https://docs.github.com/en/rest/commits/statuses
            STATUSES_URL=$(jq -r .statuses_url $json)
            if [ -n "$STARTING" ]; then
                curl -s -H "Accept: application/vnd.github+json" -H "Authorization: token $GITHUB_TOKEN" -X POST -d "{\"state\":\"$STARTING\", \"description\": \"$BODY\",\"context\":\"DCI Job\"}" "$STATUSES_URL"
            else
                DCI_STATUS=$(echo -e "$BODY"|grep distributed-ci.io|tail -1|sed -e 's/- *//' -e 's/ .*//')
                DCI_URL=$(echo -e "$BODY"|grep distributed-ci.io|tail -1|sed -e 's/.*https/https/' -e 's/ .*//')
                # when no real url is found don't pass garbage to Github
                if ! [[ "$DCI_URL" =~ ^http.* ]]; then
                    DCI_URL=
                fi
                # when no DCI job is found
                if [ -z "$DCI_URL" ]; then
                    DCI_STATUS=$(echo -e "$BODY"|grep -E "^(SUCCESS|ERROR|FAILURE|KILLED)")
                fi
                case "$DCI_STATUS" in
                    SUCCESS*)
                        GITHUB_STATUS=success;;
                    FAILURE*)
                        GITHUB_STATUS=failure;;
                    ERROR*|KILLED*)
                        GITHUB_STATUS=error;;
                    *)
                        GITHUB_STATUS=pending;;
                esac
                curl -s -H "Accept: application/vnd.github+json" -H "Authorization: token $GITHUB_TOKEN" -X POST -d "{\"state\":\"$GITHUB_STATUS\", \"description\": \"$DCI_STATUS\",\"target_url\":\"$DCI_URL\",\"context\":\"DCI Job\"}" "$STATUSES_URL"
            fi
        # non voting, only commenting
        else
            if [ -n "$STARTING" ] || [[ "$BODY" =~ KILLED ]]; then
                continue
            fi
            COMMENTS_URL=$(jq -r .comments_url $json)
            curl -s -H "Authorization: token $GITHUB_TOKEN" -X POST -d "{\"body\": \"$BODY\"}" "$COMMENTS_URL"
        fi
    fi
done

# send-feedback ends here
