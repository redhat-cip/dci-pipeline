#!/bin/bash
#
# Copyright (C) 2022-2023 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

TOPDIR=$(cd $(dirname $0); pwd)

if [[ $0 =~ .*-podman$ ]]; then
    SUFFIX=-podman
else
    SUFFIX=
fi

if [ -r "$TOPDIR/common$SUFFIX" ]; then
    BASEDIR="$TOPDIR"
else
    BASEDIR=/usr/share/dci-pipeline
fi

. "$BASEDIR/common$SUFFIX"
DCI_QUEUE="$DEFAULT_QUEUE"

# get an optional dci-queue pool name with -p
if [ "$1" = "-p" ]; then
    shift
    DCI_QUEUE="$1"
    shift
fi

# get an optional dci-queue resource name with -r
if [ "$1" = "-r" ]; then
    shift
    export DCI_QUEUE_RESOURCE="$1"
    shift
fi

if [ -n "$DCI_QUEUE_RESOURCE" ]; then
    RES="$DCI_QUEUE_RESOURCE"
else
    RES="@RESOURCE"
fi

# set PATH for yaml2json
PATH=$BASEDIR:$PATH

CMD=
OPTS=
for arg in "$@"; do
    case "$arg" in
        *:*=*)
            CMD="$CMD $arg"
            ;;
        -*)
            OPTS="$OPTS $arg"
            ;;
        *)
            # Verify if the pipeline file exists
            pipeline="${PIPELINES_DIR}/${arg}-pipeline.yml"
            if [ ! -r "$pipeline" ]; then
                echo "Unable to find $pipeline file" 1>&2
                exit 1
            fi
            names=$(yaml2json "$pipeline"|jq -r '.[].name')
            if [ -z "$names" ]; then
                echo "Unable to extract a pipeline name from $pipeline" 1>&2
                exit 1
            fi
            for name in $names; do
                # Inject the inventory and configuration arguments
                INV=$("$BASEDIR"/yaml2json "$pipeline" | \
                    jq -r ".[]|select(.name==\"$name\")|.ansible_inventory" | \
                    sed -e "s/@QUEUE/$DCI_QUEUE/" -e "s/@RESOURCE/$RES/")
                CONF=$("$BASEDIR"/yaml2json "$pipeline" | \
                    jq -r ".[]|select(.name==\"$name\")|.configuration" | \
                    sed -e "s/@QUEUE/$DCI_QUEUE/" -e "s/@RESOURCE/$RES/")
                if [ "$CONF" != null ]; then
                    CONF="$name:configuration=$CONF"
                else
                    CONF=
                fi
                # for a pipeline definition split in multiple files
                # there could be no inventory in the current file
                if [ "$INV" != null ]; then
                    CMD="$CMD $name:ansible_inventory=${INV} $CONF $pipeline"
                else
                    CMD="$CMD $CONF $pipeline"
                fi
            done
            ;;
    esac
done

if [ -z "$DCI_QUEUE" ] || [ -n "$DCI_QUEUE_RESOURCE" ]; then
    CMD="dci-pipeline$SUFFIX $CMD"
else
    CMD="dci-queue schedule $OPTS $DCI_QUEUE dci-pipeline$SUFFIX $CMD"
fi

echo "+ $CMD" 1>&2

exec $CMD

# dci-pipeline-schedule ends here
