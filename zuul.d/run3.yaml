---

- hosts: testrunner
  vars:
    dcidevenv_path_query: "[?name=='dci-dev-env'].src_dir"
    dcidevenv_path: "{{ (zuul.projects.values() | list | json_query(dcidevenv_path_query))[0] }}"
    dciclient_path_query: "[?name=='python-dciclient'].src_dir"
    dciclient_path: "{{ ansible_env.HOME }}/{{ (zuul.projects.values() | list | json_query(dciclient_path_query))[0] }}"
    dciauth_path_query: "[?name=='python-dciauth'].src_dir"
    dciauth_path: "{{ ansible_env.HOME }}/{{ (zuul.projects.values() | list | json_query(dciauth_path_query))[0] }}"
    dciansible_path_query: "[?name=='dci-ansible'].src_dir"
    dciansible_path: "{{ ansible_env.HOME }}/{{ (zuul.projects.values() | list | json_query(dciansible_path_query))[0] }}"
    dcipipeline_path_query: "[?name=='dci-pipeline'].src_dir"
    dcipipeline_path: "{{ ansible_env.HOME }}/{{ (zuul.projects.values() | list | json_query(dcipipeline_path_query))[0] }}"
  tasks:

    - name: Replace DCI_GIT_REPO_DIR in .env file to parent dir
      lineinfile:
        path: "{{ dcidevenv_path }}/.env"
        regexp: '^DCI_GIT_REPO_DIR='
        line: DCI_GIT_REPO_DIR=..

    - name: Build and launch the control server container images from dci-dev-env
      shell: |
        set -ex
        podman-compose build db api
        podman-compose up -d db api
      args:
        chdir: '{{ dcidevenv_path }}'

    - name: Check podman-compose status
      shell: |
        set -ex
        podman-compose ps
        podman-compose logs db
        podman-compose logs api
        if [ "$(podman ps -a -f status=exited --format json)" != '[]' ]; then
           exit 1
        fi
      args:
        chdir: '{{ dcidevenv_path }}'
        executable: "/bin/bash"

    - name: Provision data
      command: ./dev-setup/dci-telcoprovisioning
      args:
        chdir: "{{ dcipipeline_path }}"

    - name: Force to use dciclient from the local copy
      ansible.builtin.replace:
        path: "{{ dcipipeline_path }}/requirements.txt"
        regexp: '^dciclient$'
        replace: '-e {{ dciclient_path }}'

    - name: Force to use dciauth from the local copy
      ansible.builtin.replace:
        path: "{{ dcipipeline_path }}/requirements.txt"
        regexp: '^dciauth$'
        replace: '-e {{ dciauth_path }}'

    - name: Install python dependencies via tox
      command: tox -efunctional --notest
      args:
        chdir: "{{ dcipipeline_path }}"

    - name: Install Ansible dependencies
      shell: |
        set -ex
        . .tox/functional/bin/activate
        ./container/install-from-source.sh
      environment:
        ANSIBLE_ROLES_PATH: "~/.ansible/roles:/usr/share/ansible/roles:/etc/ansible/roles"
        ANSIBLE_COLLECTIONS_PATHS: "~/.ansible/collections:/usr/share/ansible/collections"
        ANSIBLE_DIR: "~/.ansible/roles"
      args:
        chdir: "{{ dcipipeline_path }}"

    - name: Run the example pipelines in Python 3
      shell: |
        set -ex
        env|grep ANSIBLE
        tox
      environment:
        ANSIBLE_lIBRARY: "{{ dciansible_path }}"
        ANSIBLE_COLLECTIONS_PATHS: "~/.ansible/collections:/usr/share/ansible/collections"
        ANSIBLE_ROLES_PATH: "~/.ansible/roles:/usr/share/ansible/roles:/etc/ansible/roles"
      args:
        chdir: "{{ dcipipeline_path }}"

...
